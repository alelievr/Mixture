SubShader
{
	Pass
	{
		Lighting Off
		Blend One Zero

		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#pragma target 3.0

		#pragma shader_feature CRT_2D CRT_3D CRT_CUBE

		#include "Packages/com.alelievr.mixture/Runtime/Shaders/MixtureUtils.cginc"

		// Global variables required for mip chain generation
		TEXTURE_X(_InputTexture);
		float _CurrentMipLevel;
		float _MaxMipLevel;
		float _CurrentSlice; // for 3D textures

		#pragma enable_d3d11_debug_symbols

		float4 _InputTextureSize;
		float4 _InputTextureSizeRcp;

		struct SurfaceDescriptionInputs
		{
			// update input values
			float4	uv0;

			// ShaderGraph accessors:
			float3 TimeParameters;
		};

		struct VertexToFragment
		{
			float4 positionCS : SV_POSITION;
			float2 texcoord : TEXCOORD0;
		};

		SurfaceDescriptionInputs ConvertV2FToSurfaceInputs( VertexToFragment IN )
		{
			SurfaceDescriptionInputs o;

			o.uv0 = float4(IN.texcoord, _CurrentSlice, 0);

			// other space of view direction are not supported
			o.TimeParameters = float3(_Time.y, _SinTime.x, _CosTime.y);

			return o;
		}

		bool IsGammaSpace()
		{
		#ifdef UNITY_COLORSPACE_GAMMA
			return true;
		#else
			return false;
		#endif
		}
		float4 SRGBToLinear( float4 c ) { return c; }
		float3 SRGBToLinear( float3 c ) { return c; }


		///----------------------------------------------------------
		/// Begin Generated Graph Code
		///----------------------------------------------------------
    	${Graph}
		///----------------------------------------------------------
		/// End Generated Graph Code
		///----------------------------------------------------------

		struct VertexData
		{
			uint vertexID : SV_VertexID;
		};

		VertexToFragment vert(VertexData IN)
		{
			VertexToFragment o;

			// We only need UV to generate mipmaps
			o.texcoord = GetFullScreenTriangleTexCoord(IN.vertexID);
			o.positionCS = GetFullScreenTriangleVertexPosition(IN.vertexID);

			return o;
		}

		float4 frag(VertexToFragment IN) : COLOR
		{
			SurfaceDescriptionInputs surfaceInput = ConvertV2FToSurfaceInputs(IN);

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			return surf.Color;
		}
		ENDCG
	}
}
